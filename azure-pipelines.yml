trigger:
  branches:
    include:
    - v10/main
    - v10/develop
    - v10/release/*
    - v10/hotfix
  tags:
    include:
    - 10.*

pool:
  name: Default

variables:
- group: nuget-package
- name: BuildConfiguration
  value: 'release'
- name: BuildPlatform
  value: 'any cpu'
- name: Solution
  value: '**\*.sln'
- name: NpmWorkingDirectory
  value: 'ContentGenerator'
- name: PackageDownloadPatterns
  value: |
    **/*.nupkg
    **/*.snupkg

stages:
- stage: build
  displayName: Build
  jobs:
  - job: build
    displayName: Build
    steps:
    - checkout: self
      displayName: Clone repository
      fetchDepth: 0
      clean: true

    - task: GitVersion@5
      displayName: GitVersion
      inputs:
        configFilePath: GitVersion.yml
        updateAssemblyInfo: true

    - task: NodeTool@0
      displayName: 'Use node 20.x'
      inputs:
        versionSpec: '20.x'

    - task: Npm@1
      displayName: 'Install front end packages'
      inputs:
        command: 'custom'
        workingDir: $(NpmWorkingDirectory)
        customCommand: 'ci --prefer-offline --no-audit'

    - task: Npm@1
      displayName: 'Build front end'
      inputs:
        command: 'custom'
        workingDir: $(NpmWorkingDirectory)
        customCommand: 'run build'

    - task: UseDotNet@2
      displayName: 'Use .NET 6'
      inputs:
        packageType: 'sdk'
        version: '6.x'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: 'ContentGenerator.sln'
        arguments: '--configuration $(BuildConfiguration) -p:Version=$(GitVersion.NuGetVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        packagesToPack: ContentGenerator/ContentGenerator.csproj
        configurationToPack: $(BuildConfiguration)
        nobuild: true
        versioningScheme: byEnvVar
        versionEnvVar: GitVersion.NuGetVersion
        verbosityPack: Normal
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish package artifacts'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)/packages'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: dryrun
  displayName: Dry run
  dependsOn: build
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')))
  jobs:
  - job: download
    displayName: Test download
    workspace:
      clean: all
    steps:
    - checkout: none
    - download: current
      artifact: 'drop'
      patterns: $(PackageDownloadPatterns)
      displayName: Download packages and symbols

- stage: release
  displayName: Release
  dependsOn: build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  variables:
    packageGlob: '$(Pipeline.Workspace)/**/Infocaster.Umbraco.ContentGenerator*.nupkg'
    symbolsGlob: '$(Pipeline.Workspace)/**/Infocaster.Umbraco.ContentGenerator*.snupkg'
  jobs:
  - job: releaseArtifact
    displayName: Push to artifacts
    workspace:
      clean: all
    steps:
    - checkout: none
    
    - download: current
      artifact: 'drop'
      patterns: $(PackageDownloadPatterns)
      displayName: Download build artifact
    
    - task: DotNetCoreCLI@2
      displayName: 'Push package to artifacts'
      inputs:
        command: push
        publishVstsFeed: '3356baca-d7d8-497c-a5fa-ebd93f79f7c7'
        versioningScheme: byBuildNumber
        packagesToPush: $(packageGlob)
    
    # - task: DotNetCoreCLI@2
    #   displayName: 'Push symbols to artifacts'
    #   inputs:
    #     command: push
    #     publishVstsFeed: '3356baca-d7d8-497c-a5fa-ebd93f79f7c7'
    #     versioningScheme: byBuildNumber
    #     packagesToPush: $(symbolsGlob)

  - job: releaseNuget
    displayName: Push to nuget
    workspace:
      clean: all
    steps:
    - checkout: none
    
    - download: current
      patterns: $(PackageDownloadPatterns)
      displayName: Download build artifact
    
    - task: DotNetCoreCLI@2
      displayName: 'push package to nuget.org'
      inputs:
        command: custom
        custom: nuget
        arguments: 'push $(packageGlob) -s https://api.nuget.org/v3/index.json --api-key $(NuGetApiKey)'